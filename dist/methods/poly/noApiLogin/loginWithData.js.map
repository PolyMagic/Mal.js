{"version":3,"sources":["../src/methods/poly/noApiLogin/loginWithData.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,OAAO,GAAG,UAAC,KAAa,EAAE,QAAgB,EAAE,SAAc;IAC/D,kDAAkD;IAClD,IAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;IAEnC,IAAI,OAAO,GAAG;QACZ,MAAM,EAAE,MAAM;QACd,GAAG,EAAE,mCAAmC;QACxC,OAAO,EAAE;YACP,cAAc,EAAE,mCAAmC;YACnD,eAAe,EAAE,UAAU;YAC3B,MAAM,EAAE,kBAAgB,SAAS,CAAC,YAAY,wBAC5C,SAAS,CAAC,aAAa,mCACO;SACjC;QACD,IAAI,EAAE;YACJ,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE,QAAQ;YAClB,MAAM,EAAE,GAAG;YACX,MAAM,EAAE,GAAG;YACX,UAAU,EAAE,SAAS,CAAC,UAAU;SACjC;QACD,cAAc,EAAE,KAAK;QACrB,uBAAuB,EAAE,IAAI;KAC9B,CAAC;IAEF,IAAM,aAAa,GAAG,UAAA,GAAG;QACvB,IAAI,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAExC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAApB,CAAoB,CAAC,CAAC;QAEtD,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM;YAC1B,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC3B,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAM,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,IAAI,cAAc,EAA7B,CAA6B,CAAC;aACvE,KAAK,CAAC;QAET,IAAI,GAAG,GAAG;YACR,YAAY,EAAE,YAAY;YAC1B,UAAU,EAAE,SAAS,CAAC,UAAU;SACjC,CAAC;QAEF,OAAO,GAAG,CAAC;IACb,CAAC,CAAC;IAEF,OAAO,IAAI,OAAO,CAAC,UAAC,MAAM,EAAE,GAAG;QAC7B,OAAO,CAAC,OAAO,EAAE,UAAC,GAAG,EAAE,GAAG;YACxB,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","file":"loginWithData.js","sourcesContent":["module.exports = (login: string, password: string, startData: any) => {\r\n  //   const rp = require(\"request-promise-native\");\r\n  const request = require(\"request\");\r\n\r\n  var options = {\r\n    method: \"POST\",\r\n    url: \"https://myanimelist.net/login.php\",\r\n    headers: {\r\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      \"Cache-Control\": \"no-cache\",\r\n      cookie: `MALSESSIONID=${startData.MALSESSIONID}; MALHLOGSESSID=${\r\n        startData.MALHLOGSESSID\r\n      }; is_logged_in=1; m_gdpr_mdl=1`\r\n    },\r\n    form: {\r\n      user_name: login,\r\n      password: password,\r\n      cookie: \"1\",\r\n      submit: \"1\",\r\n      csrf_token: startData.csrf_token\r\n    },\r\n    followRedirect: false,\r\n    resolveWithFullResponse: true\r\n  };\r\n\r\n  const parseResponse = res => {\r\n    let cookies = res.headers[\"set-cookie\"];\r\n\r\n    cookies = cookies.map(cookie => cookie.split(\";\")[0]);\r\n\r\n    cookies = cookies.map(cookie => {\r\n      cookie = cookie.split(\"=\");\r\n      return { name: cookie[0], value: cookie[1] };\r\n    });\r\n\r\n    const MALSESSIONID = cookies.find(cookie => cookie.name == \"MALSESSIONID\")\r\n      .value;\r\n\r\n    let out = {\r\n      MALSESSIONID: MALSESSIONID,\r\n      csrf_token: startData.csrf_token\r\n    };\r\n\r\n    return out;\r\n  };\r\n\r\n  return new Promise((EndRes, rej) => {\r\n    request(options, (err, res) => {\r\n      EndRes(parseResponse(res));\r\n    });\r\n  });\r\n};\r\n"],"sourceRoot":"../../../../src"}